 type Query {
    posts: [Post]
    post(id: String): Post
    showFeed: [Post]
    comments(postID: String): [Comment]   
  }

  type Post {
    _id: ID
    owner: User
    title: String
    description: String
    commentCount: Int
    likeCount: Int 
    latestComments: [LatestComments]
  }

  type User {
    id: ID
    username: String
    email: String
    password: String
    followers: [User]
    followees: [User]
    emailVerificationToken: String
    mailVerifiedAt: String
    status: String
  }

  type Comment {
    id: ID
    post: Post
    author: User
    content: String
  }

  type LatestComments{
    content: String
    commentedBy: User
  }

  input createPostInput{
    title: String!
    description: String!
  }

  input updatePostInput{
    title: String
    description: String
  }

  input registerUserInput{
    username: String
    email: String
    password: String
  }

  input loginUserInput{
    email: String
    password: String
  }

  type authPayload{
    user: User
    token: String
  }
 

  type Mutation {
    registerUser(data: registerUserInput): User
    verifyUser(emailVerificationToken: String): User
    loginUser(data: loginUserInput): authPayload
    createPost(data: createPostInput): Post
    updatePost(id: ID!, data: updatePostInput): Post
    deletePost(id: ID!): Post
  }

